<project name="smcop-jar-test">
	
	<!-- README:
		The purpose of this file is to check that the smccore.jar file is up to date. The JAR file in question represents functionality
		exported from the smcdailybatch application. The JAR is built automatically as part of the smcdailybatch QA build,
		and this application is set up as a child build of the smcdailybatch build, so it will get built whenever smcdailybatch gets built, to verify that there weren't any changes to the JAR file.
		
		This build file works by comparing the version of the JAR in SVN (under this application's SVN branch) to the JAR file produced by the most recent build of smcdailybatch.
		If all the file contents in both of the JARs match (except the manifest files, of course), then the build succeeds, and all is well.
		If there is a difference, then the build fails. This will then alert the developer that there was a change to SMC core that might break this application.
		
		It is possible to override this failure behavior for a single smcdailybatch SVN revision by setting the "smccore_jar_svn_version" bamboo plan variable to match the SVN revision of the JAR file.
		As soon as another revision is checked into smcdailybatch, though, the build will fail again, as a way of saying the developer needs to at least re-examine the changes to see if anything broke.
	-->
	
    <taskdef resource="net/sf/antcontrib/antlib.xml" />
	<import file="${buildScriptDir}/initializeWebBuild.xml"/>
	
	<target name="jar-check-init" depends="init-defaults">
		<property name="jarCheck.dependentJars.dir" value="${workDir}/dependent-jars" />
		<property name="jarCheck.compare.dir" value="${workDir}/jar-compare" />
		<property name="jarCheck.jar.name" value="smccore" />
		<property name="jarCheck.latest.jar" value="${jarCheck.compare.dir}/${jarCheck.jar.name}-latest.jar" />
		<property name="jarCheck.latest.dir" value="${jarCheck.compare.dir}/${jarCheck.jar.name}-latest" />
		<property name="jarCheck.latest.manifest" value="${jarCheck.compare.dir}/latest.MANFIEST.MF" />
		<property name="jarCheck.svn.jar" value="${jarCheck.compare.dir}/${jarCheck.jar.name}-svn.jar" />
		<property name="jarCheck.svn.dir" value="${jarCheck.compare.dir}/${jarCheck.jar.name}-svn" />
		<property name="jarCheck.svn.manifest" value="${jarCheck.compare.dir}/svn.MANFIEST.MF" />
	</target>
	
	<target name="jar-check-clean" depends="jar-check-init">
		<delete dir="${jarCheck.compare.dir}" />
	</target>
	
	<target name="jar-check-copy-jars" depends="jar-check-init">
		<mkdir dir="${jarCheck.compare.dir}"/>
		
		<!-- Copy both the latest version of the JAR file (from the most recent smcdailybatch build) and the JAR file version from this application's SVN repo so we can compare them. -->
		<echo message="Copying dependent JARs for comparison" />
		<copy tofile="${jarCheck.latest.jar}" file="${jarCheck.dependentJars.dir}/${jarCheck.jar.name}.jar" />
		<copy tofile="${jarCheck.svn.jar}" file="${build.lib}/${jarCheck.jar.name}.jar" />
		
		<!-- Expand everything from JAR files -->
		<unjar src="${jarCheck.latest.jar}" dest="${jarCheck.latest.dir}" />
		<unjar src="${jarCheck.svn.jar}"    dest="${jarCheck.svn.dir}" />
		
		<!-- Move manifest files to another location -->
		<move file="${jarCheck.latest.dir}/META-INF/MANIFEST.MF" tofile="${jarCheck.latest.manifest}" />
		<move file="${jarCheck.svn.dir}/META-INF/MANIFEST.MF"    tofile="${jarCheck.svn.manifest}" />
	</target>
	
	<target name="jar-check-compare" depends="jar-check-copy-jars">
		<!-- Locate SVN revision from MANIFEST.MF -->
		<loadproperties srcfile="${jarCheck.latest.manifest}" prefix="jarCheck.latest.manifest" prefixValues="false">
			<filterchain>
				<linecontains>
					<contains value="SVN-VERSION:" /> 
				</linecontains>
			</filterchain>
		</loadproperties>
		<loadproperties srcfile="${jarCheck.svn.manifest}" prefix="jarCheck.svn.manifest" prefixValues="false">
			<filterchain>
				<linecontains>
					<contains value="SVN-VERSION:" /> 
				</linecontains>
			</filterchain>
		</loadproperties>
		
		<echo message="Latest SVN Revision: ${jarCheck.latest.manifest.SVN-VERSION}" />
		<echo message="Repo   SVN Revision: ${jarCheck.svn.manifest.SVN-VERSION}" />
		
		<!-- Run "diff" command to see differences. -->
		<exec executable="/usr/bin/diff" outputproperty="jarCheck.checksum.differences">
			<arg value="-rq" />
			<arg value="${jarCheck.latest.dir}" />
			<arg value="${jarCheck.svn.dir}" />
		</exec>
		<echo message="Differences for ${jarCheck.jar.name}.jar: ${jarCheck.checksum.differences}" />
		
		<!-- If differences, check latest SVN revision against environment variable -->
		<if>
			<and>
				<isset property="jarCheck.checksum.differences" />
				<not>
					<equals arg1="${jarCheck.checksum.differences}" arg2="" />
				</not>
				<not>
					<equals arg1="${jarCheck.latest.manifest.SVN-VERSION}" arg2="${env.bamboo_smccore_jar_svn_version}" />
				</not>
			</and>
			<then>
				<echo message="======================" />
				<echo message="Version difference in ${jarCheck.jar.name}.jar detected." />
				<echo message="Latest JAR SVN Revision: ${jarCheck.latest.manifest.SVN-VERSION}" />
				<echo message="${applnName} Repository JAR SVN Revision:  ${jarCheck.svn.manifest.SVN-VERSION}" />
				<echo message="To fix this, either download the updated JAR from the SMC Core JAR artifact of the most recent smcdailybatch build, and update the version in the lib/ directory of this application," />
				<echo message="  or set the smccore_jar_svn_version variable of this build to ${jarCheck.latest.manifest.SVN-VERSION}" />
				<echo message="======================" />
				<fail message="Dependent JAR version mismatch. See above lines in the build log for how to fix." />
			</then>
		</if>
	</target>
</project>