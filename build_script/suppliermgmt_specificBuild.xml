<project name="suppliermgmtdist" default="prePackageHook">
	<import file="${env.bamboo_buildscript_dir}/compileBatch.xml"/>
	
	<target name="prePackageHook" depends="setClassPath">
		
		<!-- Have to have special logic for handling QA2 environment - targeted directories come from a different place. -->
		<if>
			<equals arg1="${applnName}" arg2="suppliermgmt" />
			<then>
				<property name="smc.config.dir" value="${config.dir}" />
			</then>
			<else>
				<property name="smc.config.dir" value="${appln.src.dir}/${configfilelocation}/qa2" />
			</else>
		</if>
		
		<!--
			These JARs are just there for testing, and should not be included in the WAR file deployed to WebSphere.
			They are deleted from the WAR build directory, and are later copied into the test build directory.
		-->
		<property name="smc.test.includes" value="mockito-core-*.jar,junit-*.jar,hamcrest-*.jar,hsqldb*.jar,byte-buddy-*.jar,objenesis-*.jar" />
		
		<!-- Copy logging config to conf directory -->
		<echo message=" to  dir '${build.webinf.classes}/conf/xml' from ${smc.config.dir}" />
		<copy todir="${build.webinf.classes}/conf/xml" overwrite="true">
			<fileset dir="${smc.config.dir}">
				<include name="log4j.xml" />
			</fileset>
		</copy>

		<!--Copy the web deployment files to WEB-INF directory -->
		<echo message=" to  dir '${build.webinf}' from ${smc.config.dir}" />
		<copy todir="${build.webinf}" overwrite="true">
			<fileset dir="${smc.config.dir}">
				<include name="web.xml" />
				<include name="ibm-web-ext.xml" />
			</fileset>
		</copy>
		
		<!-- Delete the files that are not needed in the war -->
		<delete>
			<fileset dir="${build.webinf}/lib" includes="${smc.test.includes}"/>
		</delete>
		
		<!-- ******* COMPILE TESTS ******* -->
		<echo message="Compiling tests with the main class path, and with the main compiled class files included in the classpath." />
		<property name="build.test.dir" value="${build}/test" />
		<property name="src.test.dir" value="${appln.src.dir}/test" />
		
		<!-- Ensure our test build directories are clean. They should be, since the build directory gets re-created each time, but just in case... -->
		<delete dir="${build.test.dir}" />
		<mkdir dir="${build.test.dir}/classes" />
		
		<!-- The classpath for compiling tests includes everything in the main classpath, as well as the compiled main project class files themselves, since the tests depend on them. -->
		<path id="test.classpath">
			<path refid="project.classpath" />
			<pathelement location="${build.webinf.classes}" />
		</path>
		<property name="testclasspath" refid="test.classpath" />
		<echo message="Test Classpath: ${testclasspath}" />
		
		<!-- Compile the tests to their own subdirectory inside "build", which can get exported as an artefact from the compile stage of the build plan. -->
		<javac fork="yes" srcdir="${src.test.dir}" executable="${javac_compile_executable}" destdir="${build.test.dir}/classes" debug="${env.bamboo_javac_debug_option}" debuglevel="${env.bamboo_javac_debug_level}" optimize="false" source="${javac_compile_version}" target="${javac_compile_version}" encoding="iso-8859-1" classpathref="test.classpath" />
		
		<!-- Copy all the other resource files from the test directory that we need to run the tests (ex: spring configuration files, SQL files, other XML files, etc.) -->
		<echo message="Copying test resource files." />
		<copy todir="${build.test.dir}/classes">
			<fileset dir="${src.test.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		
		<!-- Create a directory to store JARs that the tests depend upon, but the main source code does not. These will not get included in the final packaged WAR, but will be needed to run the tests. -->
		<echo message="Copying test dependency JARs into test build directory." />
		<copy todir="${build.test.dir}/lib">
			<fileset dir="${source.lib.dir}" includes="${smc.test.includes}" />
		</copy>
	</target>
</project>