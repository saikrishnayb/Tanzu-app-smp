<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.penske.apps.suppliermgmt.dao.HomeDashboardDao">

  	<select id="selectTabs" resultType="com.penske.apps.suppliermgmt.model.Tab">  
 		SELECT	DISTINCT(ST.TAB_KEY) AS tabKey,
 				ST.TAB_ID AS tabId,
 				ST.TABNAME AS tabName,
				ST.IMG_URL AS imageUrl,
				ST.DISPLAY_SEQUENCE AS displaySequence

		FROM	SMC.SMC_TAB_MASTER ST
		JOIN SMC_SECURITY_FUNCTION SF 
		ON ST.TAB_ID = SF.TAB_ID 
		JOIN SMC_ROLE_SEC_FUNCTIONS RSF
		ON RSF.SEC_FUNC_ID = SF.SEC_FUNC_ID
		WHERE	ST.DASHBOARD_TAB = #{dashBoardId} AND RSF.ROLE_ID=#{roleId} AND  ST.STATUS= #{status}
		ORDER BY DISPLAY_SEQUENCE ASC
		
	</select>  

	<select id="selectHeaders" resultType="com.penske.apps.suppliermgmt.model.AlertHeader">
		SELECT	SAH.HEADER_NAME AS headerName,
				SAH.HELP_TEXT AS helpText,
				SAH.HEADER_ID AS headerId
		
		FROM	SMC.SMC_ALERT_HEADER SAH
		JOIN 	SMC.SMC_TAB_MASTER ST
		ON 		SAH.TAB_ID = ST.TAB_ID
		
		WHERE	ST.TAB_KEY = #{value}
		
		ORDER BY SAH.DISPLAY_SEQUENCE ASC
	</select>
	
	<select id="selectAlerts" resultType="com.penske.apps.suppliermgmt.model.Alert">
		SELECT	SA.ALERT_ID AS alertId,
				SA.ALERT_KEY AS alertKey,
				SA.ALERT_NAME AS alertName,
				SA.ACTIONABLE AS actionable,
				SA.HELP_TEXT AS helpText,
				ST.TEMPLATE_KEY AS templateKey
		
		FROM	SMC.SMC_ALERTS SA
		LEFT JOIN  	SMC.SMC_SEARCH_TEMPLATES ST
		ON		SA.TEMPLATE_ID = ST.TEMPLATE_ID
		
		WHERE	SA.HEADER_ID = #{value}
		
		ORDER BY SA.DISPLAY_SEQUENCE ASC
	</select>	
	<!--  
	 * This method  is used to access the database for getting OrderFulfillment count.
	 * Input : current SSOId
	 * Output : Hasmap contains alertid and count 
	 *  
	 */ -->
	<select id="getOrderFullfillmentActionItems" parameterType ="java.util.HashMap" statementType="CALLABLE">
    {
      CALL SMC.SMC_ACTION_ITEMS_FULFILLMENT
      (
               #{IN_SSO_ID, mode=IN, jdbcType=VARCHAR},
               #{OUT_ACTION_ITEMS,mode=OUT,jdbcType=VARCHAR},
                #{ERR_CODE, mode=OUT, jdbcType=INTEGER},
                #{ERR_MSG, mode=OUT, jdbcType=VARCHAR}
       )   
     }    
   </select>
   
   <!--  
	 * This method  is used to access the database for getting OrderConfirmation count.
	 * Input : current SSOId
	 * Output : Hasmap contains alertid and count 
	 *  
	 */ -->
	<select id="getOrderConfirmationActionItems" parameterType ="java.util.HashMap" statementType="CALLABLE">
    {
      CALL SMC.SMC_ACTION_ITEMS_CONFIRMATION
      (
               #{IN_SSO_ID, mode=IN, jdbcType=VARCHAR},
               #{OUT_ACTION_ITEMS,mode=OUT,jdbcType=VARCHAR},
                #{ERR_CODE, mode=OUT, jdbcType=INTEGER},
                #{ERR_MSG, mode=OUT, jdbcType=VARCHAR}
       )   
     }    
   </select>
   
    <!--  
	 * This method  is used to access the database for getting Production action items count.
	 * Input : current SSOId
	 * Output : Hasmap contains alertid and count 
	 *  
	 */ -->
	<select id="getProductionActionItems" parameterType ="java.util.HashMap" statementType="CALLABLE">
    {
      CALL SMC.SMC_ACTION_ITEMS_PRODUCTION
      (
               #{IN_SSO_ID, mode=IN, jdbcType=VARCHAR},
               #{OUT_ACTION_ITEMS,mode=OUT,jdbcType=VARCHAR},
                #{ERR_CODE, mode=OUT, jdbcType=INTEGER},
                #{ERR_MSG, mode=OUT, jdbcType=VARCHAR}
       )   
     }    
   </select>
   
    <!--  
	 * This method  is used to access the database for getting Communication Action items count.
	 * Input : current SSOId
	 * Output : Hasmap contains alertid and count 
	 *  
	 */ -->
	<select id="getCommunicationActionItems" parameterType ="java.util.HashMap" statementType="CALLABLE">
    {
      CALL SMC.SMC_ACTION_ITEMS_COMMUNICATION
      (
               #{IN_SSO_ID, mode=IN, jdbcType=VARCHAR},
               #{OUT_ACTION_ITEMS,mode=OUT,jdbcType=VARCHAR},
                #{ERR_CODE, mode=OUT, jdbcType=INTEGER},
                #{ERR_MSG, mode=OUT, jdbcType=VARCHAR}
       )   
     }    
   </select>
   
	<!-- <select id="getTheCount" parameterType="com.penske.apps.suppliermgmt.model.OrderFulfillment" resultType="com.penske.apps.suppliermgmt.model.LookUp">
		<if test=""> TO-DO condition check for pending release to supplier 
		SELECT SUM (CASE WHEN 1=1 THEN 1 ELSE 0 END) AS lookUpName,
				SUM ( CASE WHEN((days(CURRENT DATE) - days(VSSTATUS_DATE) + 1) -
				((52 * (year(CURRENT DATE) - year(VSSTATUS_DATE)) + week(CURRENT DATE) - week(VSSTATUS_DATE)) * 2) - 
				(case when dayofweek(VSSTATUS_DATE) = 1 then 1 else 0 end) -
				(case when dayofweek(CURRENT DATE) = 7 then 1 else 0 end))> 1 THEN 1 ELSE 0 END) AS lookUpValue 
				FROM SMC_FULFILLMENT_SEARCH_VIEW FSVIEW 
				JOIN SMC_BUDDIES ON BUYER_SSO = BUDDY_SSO and SSO =#{ssoID}
				
				<where>
					 <if test="vsStatus !=null">	
					 		FSVIEW.VSSTATUS = #{vsStatus}
					 </if>
					 
					 <if test="caStatus !=null">
						AND	 FSVIEW.CASTATUS IN 
								<foreach close=")" separator="," open="(" collection="caStatus" item="item"> 
									#{item}
								 </foreach>	
					</if>
					
					 <if test="isPurchaseReview !=null">
					 	AND FSVIEW.IS_PURCHASE_REVIEW=#{isPurchaseReview}
					 </if>
					 
					  <if test="inHouseOrder !=null">
					  AND	FSVIEW.IN_HOUSEORDER=#{inHouseOrder}
					  </if>
					AND FSVIEW.IS_DELETED='N'
				</where>
				
				
			SELECT COUNT(1) FROM SMC_DCN_HEADER SDH 
				JOIN SMC_PURCHASING_DETAILS SPD ON SDH.DCN = SPD.DCN
				JOIN SMC_PURCHASING_HEADER SPH ON SPD.PO_NUMBER = SPH.PO_NUMBER
				JOIN SMC_BUDDIES ON BUYER_SSO = BUDDY_SSO and SSO =501895003
				WHERE SPH.RELEASE_DATE = '0001-01-01-00.00.00.000000' AND SPH.IS_PDF_GENERATED = 'Y' AND EDI_FLAG = 'N'
				
				
		
	</select> -->
</mapper>